/*var config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 200 },
            gravity: {x: 200}
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

var game = new Phaser.Game(config);*/

class Game extends Phaser.Scene {
    constructor() {
        super("Game");
        this.passos;
        this.ovni;
    }

    preload() {
        this.load.setBaseURL('https://labs.phaser.io');
        this.load.image('sky', 'assets/skies/space.jpg');
        this.load.image('asteroids', 'assets/games/asteroids/asteroid1.png');
        this.load.image('asteroids2', 'assets/games/asteroids/asteroid2.png');
        this.load.image('red', 'assets/particles/yellow.png');
        this.load.spritesheet('ovni', 'assets/sprites/player.png', {frameWidth: 32, frameHeight: 48});
    }

    create() {
        this.add.image(700, 500, 'sky');

        var particles = this.add.particles('red');
        var particles2 = this.add.particles('red');

        var emitter = particles.createEmitter({
            speed: 100,
            scale: { start: 1, end: 0 },
            blendMode: 'ADD'
        });

        var emitter2 = particles2.createEmitter({
            speed: 100,
            scale: { start: 1, end: 0 },
            blendMode: 'ADD'
        });

        var asteroids = this.physics.add.image(400, 100, 'asteroids');
        var asteroids2 = this.physics.add.image(500, 200, 'asteroids2');

        asteroids.setVelocity(500, 700);
        asteroids.setBounce(1, 1);
        asteroids.setCollideWorldBounds(true);

        asteroids2.setVelocity(500, 700);
        asteroids2.setBounce(1, 1);
        asteroids2.setCollideWorldBounds(true);

        emitter.startFollow(asteroids);
        emitter2.startFollow(asteroids2);

        this.ovni = this.physics.add.image(320, 470, 'ovni', 4);
        this.ovni.setScale(2.5, 2.5);
    
        //this.ovni.setVelocityX(20);
        this.ovni.setVelocity(20, 10);
        this.ovni.setCollideWorldBounds(true);

        this.input.keyboard.on("keydown_LEFT", () => this.teclado('ESQUERDA'));
        this.input.keyboard.on("keydown_RIGHT", () => this.teclado('DIREITA'));
        this.input.keyboard.on("keydown_DOWN", () => this.teclado('BAIXO'));
        this.input.keyboard.on("keydown_UP", () => this.teclado('CIMA'));

        this.passos = 10;

    }
    teclado(tecla){
        switch(tecla){
            case 'ESQUERDA':
                this.ovni.setVelocityX(this.passos * -1);
                break;
            case 'DIREITA':
                this.ovni.setVelocityX(this.passos * +1);
                break;
            case 'BAIXO':
                this.ovni.setVelocityY(0);
                break;
            case 'CIMA':
                this.ovni.setVelocityY(this.passos * +1);
                break;
            default:
                break;        
        } 
    }

    update() {
        
    }
}    