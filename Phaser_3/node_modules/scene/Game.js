/*var config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 200 },
            gravity: {x: 200}
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

var game = new Phaser.Game(config);*/

class Game extends Phaser.Scene {
    constructor() {
        super("Game");
    }

    preload() {
        this.load.setBaseURL('https://labs.phaser.io');
        this.load.image('sky', 'assets/skies/space.jpg');
        this.load.image('asteroids', 'assets/games/asteroids/asteroid1.png');
        this.load.image('asteroids2', 'assets/games/asteroids/asteroid2.png');
        this.load.image('red', 'assets/particles/yellow.png');
        this.load.image('ovni', 'assets/sprites/player.png');
    }

    create() {
        this.add.image(700, 500, 'sky');

        var particles = this.add.particles('red');
        var particles2 = this.add.particles('red');

        var emitter = particles.createEmitter({
            speed: 100,
            scale: { start: 1, end: 0 },
            blendMode: 'ADD'
        });

        var emitter2 = particles2.createEmitter({
            speed: 100,
            scale: { start: 1, end: 0 },
            blendMode: 'ADD'
        });

        var asteroids = this.physics.add.image(400, 100, 'asteroids');
        var asteroids2 = this.physics.add.image(500, 200, 'asteroids2');

        asteroids.setVelocity(500, 700);
        asteroids.setBounce(1, 1);
        asteroids.setCollideWorldBounds(true);

        asteroids2.setVelocity(500, 700);
        asteroids2.setBounce(1, 1);
        asteroids2.setCollideWorldBounds(true);

        emitter.startFollow(asteroids);
        emitter2.startFollow(asteroids2);

        var ovni = this.physics.add.image(200, 500, 'ovni');
    
        ovni.setVelocity(400, 100);
        ovni.setBounce(1, 1);
        ovni.setCollideWorldBounds(true);

        this.w = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W)
        this.a = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A)
        this.s = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S)
        this.d = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D)

        this.ovni = this.physics.add.image(config.width / 2, config.height / 2, 'ovni').setScale(2.5, 2.5);
        this.ovni.setCollideWorldBounds(true);

        /*this.time = 10;
        this.txtTimer = game.add.text(game.world.width -15, 15, 'Tempo:' + this.getText(this.time),{font: '15px emulogic', fill: '#1C1C1C'});
        this.txtTimer.anchor.set(1, 0);*/

    }

    update() {
        let cursors = this.input.keyboard.createCursorKeys();
        if ((cursors.left.isDown || this.a.isDown) || (cursors.right.isDown || this.d.isDown)) this.ovni.   setVelocityX(cursors.left.isDown || this.a.isDown ? -160 : 160);
        else this.ovni.setVelocityX(0);
        if ((cursors.up.isDown || this.w.isDown) || (cursors.down.isDown || this.s.isDown)) this.ovni.  setVelocityY(cursors.up.isDown || this.w.isDown ? -160 : 160);
        else this.ovni.setVelocityY(0);
    }
}    